# Komut satırı kullanımı {#sec-command-line}

Ders kapsamında yapacağımız çalışmalarda öncelikle TRUBA üzerinde komut satırı kullanımını inceleyeceğiz.

Öncelikle sistemimimize bağlanalım. Burada `egitim` yerine size verilen kullanıcı ismini girmelisiniz. Daha sonra yine size verilen şifrenizi yazarak sisteme bağlanabilirsiniz. Ancak şifrenizi yazarken ekrandaki imleç hareket etmeyecektir. Siz normal bir şekilde şifrenizi yazın:

```bash
ssh egitim@172.16.7.1 
```

Sisteme girdikten sonra çıkan ekranı `enter` tuşuna basarak geçelim.

## Linux'ta dosya yapısı

Girdiğimiz ekran aslında bizim kullanıcı klasörümüz olacaktır. TRUBA - ve genel olarak linux sistemleri - çok kullancılı bilgisayarlardır. Bunun anlamı, sistem üzerinde farklı kullanıcılar bulunmakta ve TRUBA sistemi de bütün işleyişi kontrol etmektedir. Her kullanıcı, kendi klasörü içerisinde bütün yazma (W), okuma (R), ve çalıştırma (X) haklarına sahiptir. Ancak diğer kullanıcıların klasörlerinde, ve sistem ile ilgili klasörlerde çok kısıtlı haklara sahip olabilirler.

Linux işletim sisteminde dosya yapısı kök `/` işareti ile başlar. Bu işaret aynı zamanda klasörleri birbirinden ayrır.

Bulunduğumuz klasör konumunu öğrenmek için `pwd` (print working directory) komutunu yazalım:


```bash
pwd
```

Benim ekranımda bu komutun çıktısı şöyle oldu:

```bash
/truba/home/egitim
```

`home` klasörü, kullanıcıların klasörlerinin bulunduğu konumu işaret etmektedir.

## Klasör oluşturma

Şimdi komut satırını öğrenmek için gerekli olan dosyaları yükleyeceğimiz klasörü oluşturalum. `mkdir` komutu klasör oluşturmak için kullanılır. İlk olarak kendi ismimizi kullanarak bir klasör oluşturalım:


```bash
mkdir deneme_dersi
```

## Klasör içindekileri inceleme 

Bir klasör içindeki dosyaları listelemek için `ls` komutunu kullanabiliriz:

```bash
ls
```

Eğer daha ayrıntılı bilgi istersek, `ls -l` komutunu kullanabiliriz. Bu komut, dosya ve klasörleri listeler

```bash
ls -l
```

Benim ekranımda şöyle bir görüntü çıktı (@fig-command-line). 

![ls -l komutu çıktısı](images/command-line.png){#fig-command-line}

## Klasörler arasında gezinti

Bir klasörün içerisine girmek için `cd` (change directory) komutu kullanılır:

```bash
cd emrah
```
Şimdi hangi klasörde olduğumuza bakalım:

```bash
pwd
```

## Dosya ve klasör kopyalama

İlk olarak örnek dosyamızı kopyalayarak işe başlayalım. `cp` komutu dosya ve klasörleri kopyalamak için kullanılır. Klasörleri kopyalamak istiyorsak `-r` işaretini eklememiz gerekir.

```bash
cp -r /truba/home/egitim90/ornek_veri .
```

Bu komut bize, `/truba/home/egitim/test` klasörünü, `.` yani bulunduğumuz klasöre kpopyalamamızı sağlamaktadır.

Linux üzerinde bunun gibi kısayollar bulunmaktadır.

+ `.` bulunduğumuz klasör
+ `~` ev klasörümüz

Şimdi tekrar bulunduğumuz klasör içindekileri listeleyelim:

```bash
ls -l
```

Şimdi de `test` klasörüne girelim:

```bash
cd test
```

Ve içindekileri listeleyelim:

```bash
ls -l
```

## Dosyalarda işlem yapmak

Şimdi `ornek.fasta` dosyasının içini inceleyelim. `cat` komutu bize bir dosyanın içindekileri ekrana yazdırma şansı verir:

```bash
cat ornek.fasta
```

Dikkat ederseniz hepsini ekrana yazdırdı. Ancak dosyamız çok büyükse bunu yapma şansımız yok. O zaman `less` komutunu kullanabiliriz:

```bash
less
```

`less` aslında metin dosyalarını incelememizi sağlayan bir komut satırı programı. Bu sayede bir dosyanın içindekilere bakabiliriz. Bu programdan çıkmak için `q` tuşuna basınız.

İstersek `less` programı ile dosyalar içerisinde arama da yapabiliriz. Bunun için ise, öncelikle `/` karakterine basalım, daha sonra da aramak istediğimiz kelimeyi yazalım. `less` programı sizin arama yaptığınızı anlayacaktır.

Şimdi yine `ornek.fasta` dosyasını açalım ve "ENA" kelimesini arayalım

## Dosyalarda arama yapmak

İstersek `grep` komutu ile de bir dosya içerisinde arama yapabiliriz. Ancak bu sefer yaptığımız arama ekrana yazdırılacaktır:

```bash
grep ENA ornek.fasta
```

## Çıktı yönlendirme

Linux temelli sistemlerin en önemli özelliklerinden bir tanesi de çıktı yönlendirmedir. Yukarıdaki komuta bakmıştık, istersek çıktıyı başka bit dosyaya yönlendirebiliriz. Bunun için `>` komutunu kullanmalıyız.

```bash
grep ENA ornek.fasta > arama.txt
```

Ne yaptık? Önce `ornek.fasta` dosyasında "ENA" kelimesini aradık, ve çıktıyı başka bir metin dosyasına yönlendirdirdik.

## Boru (Pipe)

Diğer önemli bir özellik ise, elimizdeki çıktıyı başka bir dosyaya yönlendirmek. Bunun için `|` karakterini kullanıyoruz.

```bash
grep ENA ornek.fasta | grep CAA
```

Yukarıdaki komuta bakarsak, önce "ENA" kelimesini arıyoruyz, sonra çıktıyı başka bir `grep` komutuna yönlendirip, `CAA` kelimesini arıyoruyz.

İstersek o çıktıyı bir dosyaya gönderebiliriz:

```bash
grep ENA ornek.fasta | grep CAA > arama.txt
```

Ama dikkat edin! Artık `arama.txt` dosyasının üzerine yazdık! Eğer bu dosyayı korumak istiyorsanız başka bir dosya ismi vermelisiniz.

:::{.callout-warning}
## Varolan dosyanın üzerine yazma

Eğer `>` kullanırsanız, ve varolan bir dosyayı hedef gösterirseniz, o dosyanın üzerine yazmış olursunuz!
:::

## Metin dosyaları oluşturmak

Şimdi ise metin dosyalarını oluşturma ve kaydetmeye bakalım. Metin tabanlı sistemlerde `nano` isimli metin editörü, bize metin dosyaları ile çalışma imkanı sağlar. 

Daha önce oluşturduğumuz `arama.txt` dosyasını açalım:

```bash
nano arama.txt
```

Artık dosya içerisine istediğimiz bilgiyi yazabiliriz. Yazdıklarımız bittikten sonra `ctrl + o ` tuşu ile kaydedebiliriz. Ardından `ctrl + x` tuş kombinasyonuyla çıkış yapabilirsiniz.

İsterseniz yeni bir dosya da oluşturabilirsiniz:

```bash
nano yeni-dosya.txt
```

Dikkat edin, boşluk karakteri kullanmadım. Onun yerine tire `-` karakterini kullandım.

## `for ` döngüsü kullanımı

For döngüsü şu şeklde kullanılır.

Bir değişken belirleyelim:

```bash
FILES="a.txt b.txt c.txt"
```

Elimizde 3 farklı dosya olsun. Bu üç dosyaya belirli işlemleri uygulamak istiyoruz. For döngüsü sayesinde bu işlemleri tek tek bütün dosyalara sırayla uygulayabiliriz:

```bash
for FILE in ${FILES}
do
    echo ${FILE}
done
```

Bu betik, öncelikle FILES içersisindeki dosyaları sırayla FILE içersine atacak. ve `do` kısmından sonra gelen adımı uygulayacak.
