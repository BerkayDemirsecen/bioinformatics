# Komut satırı kullanımı {#sec-command-line}

Ders kapsamında yapacağımız çalışmalarda öncelikle TRUBA üzerinde komut satırı kullanımını inceleyeceğiz.

Öncelikle sistemimimize bağlanalım. Burada `egitim` yerine size verilen kullanıcı ismini girmelisiniz. Daha sonra yine size verilen şifrenizi yazarak sisteme bağlanabilirsiniz. Ancak şifrenizi yazarken ekrandaki imleç hareket etmeyecektir. Siz normal bir şekilde şifrenizi yazın:

```bash
ssh egitim@levrek.ulakbim.gov.tr
```

Sisteme girdikten sonra çıkan ekranı `enter` tuşuna basarak geçelim.

## Linux'ta dosya yapısı

Girdiğimiz ekran aslında bizim kullanıcı klasörümüz olacaktır. TRUBA - ve genel olarak linux sistemleri - çok kullancılı bilgisayarlardır. Bunun anlamı, sistem üzerinde farklı kullanıcılar bulunmakta ve TRUBA sistemi de bütün işleyişi kontrol etmektedir. Her kullanıcı, kendi klasörü içerisinde bütün yazma (W), okuma (R), ve çalıştırma (X) haklarına sahiptir. Ancak diğer kullanıcıların klasörlerinde, ve sistem ile ilgili klasörlerde çok kısıtlı haklara sahip olabilirler.

Linux işletim sisteminde dosya yapısı kök `/` işareti ile başlar. Bu işaret aynı zamanda klasörleri birbirinden ayrır.

Bulunduğumuz klasör konumunu öğrenmek için `pwd` (print working directory) komutunu yazalım:


```bash
pwd
```

Benim ekranımda bu komutun çıktısı şöyle oldu:

```bash
/truba/home/egitim
```

`home` klasörü, kullanıcıların klasörlerinin bulunduğu konumu işaret etmektedir.

## Dosya listeleme

Şimdi `ls` komutunu yazalım. Bu komut bulunduğumuz klasördeki dosyaları ve klasörleri gösterir.

Eğer daha ayrıntılı bilgi istersek, `ls -l` komutunu kullanabiliriz. Bu komut, dosya ve klasörleri listeler; yime istersek klasör adı belirtebiliriz:

```bash
ls -l
```

Benim ekranımda şöyle bir görüntü çıktı (@fig-command-line). 

![ls -l komutu çıktısı](images/command-line.png){#fig-command-line}

Klasörleri son değiştirme sırasına göre göster ve bayt bilgisini okunabilir hale getir:

```bash
ls -ltrh
```

## Klasör oluşturma

Şimdi komut satırını öğrenmek için gerekli olan dosyaları yükleyeceğimiz klasörü oluşturalum. `mkdir` komutu klasör oluşturmak için kullanılır. İlk olarak kendi ismimizi kullanarak bir klasör oluşturalım:

Klasörü kendi ismimizde oluşturalım:

```bash
mkdir emrah
```

## Klasörlerde hareket

Bunun için `cd` komutunu kullanıyoruz:

```bash
cd emrah
```

Şimdi de `pwd` yazalım.

Bir üst seviyeye çıkmak için `cd ..` yazın.

Ama şimdi kendi ismizle oluşturduğunuz klasöre gidiniz.

## Temel dosya işlemleri

Öncelikle kullanacağımız veri setini indirelim:

```bash
wget https://github.com/emrahkirdok/bioinformatics/raw/3defc4590bf8a351c30747061be5fde3924eae5d/00-setup/test-data.tar.gz
```

Kullandığımız `wget` komutu internet üzerindeki bir dosyayı indirmemizi sağlıyor.

Dosyaya bakalaım:

```bash
ls -ltrh 
```

Burada sıkıştırılmış bir arşiv dosyası indirdik, `tar` bu dosyanın arşivlendiğini, `gz` ise sıkıştırıldığın bize belitirl. Rengi kurmızı çünkü sıkıştırılmış bir dosya.

Bu dosyayı açalım:

```bash
tar -xzvf test-data.tar.gz
```

Bakalım arşivi açmış mıyız?

```bash
ls -ltrh
```


Açtığımız klasörü `ls` komutu ile inceleyebilirz. Klasörün içinde değilsek klasör adını yazmalıyız; klasör adı yazmadığımız durumda her neredeysek oradaki dosyaları listeleyecektir: 

```bash
ls -ltrh test-data
```

Bu klasör içerisine girelim:

```bash
cd test-data
```

Klasör içindekileri gösterelim:

```bash
ls -ltrh
```

## Dosya içeriğini gösterme

Bir dosya içeriğini ekrana yazdırmak istiyorsak, `cat` komutunu kullanmalıyız:

```bash
cat ornek_fastq.fastq
```

Ancak dosya boyutumuz fazlaysa, bunu kullanamyaız. Çünkü her şeyi ekrana yazrırı.

Dosyanın ilk 10 satırını ekrana yazdıralım:

```bash
head  ornek_fastq.fastq
```

Son 10 satırı yazdıralım

```bash
tail  ornek_fastq.fastq
```

## Dosyaları `less` ile inceleme

Ama dosyaları incelemek istersek, `less` komutunu kullanalmım:

```bash
less  ornek_fastq.fastq
```

Bu programdan çıkmak için `q` tuşuna basın.

## TArihçeyi inceleyelim:

`history` komutu ile komut tarihçesini inceleyebiliriz.

Bunu protokolünüzde kullandığnız kodları kaydetmek için kullanabilisiniz.

## Yeniden yönlendirme işlemi yapalım

Unix/Linux sistemlerinin en önemli özelliği pipe ve redirection. Bir komutuun çıktıdını başka bir komuta gönderebilirisnzi ya da baka bir dosyaya aktarabiliriniz.

```bash
history > tarihce.txt
```

Şimdi `ls -ltrh` ile inceleyim.

Bir `tarihce.txt` isimli dosyanın oluşmuş olması gerekli.

Ancak bu işlemde, `tarihce.txt` dosyası yoksa o dosya oluşturulur, böyle bir dosya varsa, silip üstüne yazar.

Eğer bu dosyayı silmeden ekleme yapmak istersenz, `>>` kullanın. Bu sayede varolan dosyayı silmez, sonuna ekler.

:::{.callout-warning}
## Varolan dosyanın üzerine yazma

Eğer `>` kullanırsanız, ve varolan bir dosyayı hedef gösterirseniz, o dosyanın üzerine yazmış olursunuz! Dosyanın içindeki eski bilgileri kaybederiz!
:::

## Dosyayı değiştirme

`nano` programı ile, varolan metin dosyalarını açabilirsiniz.

```bash
nano tarihce.txt
```

CTRL + K metni keser
CTRL + U metni yapıştırır
CTRL + O dosyayı kaydeder
CTRL + X çıkar

## Dosya ve klasör kopyalama

İlk olarak örnek dosyamızı kopyalayarak işe başlayalım. `cp` komutu dosya ve klasörleri kopyalamak için kullanılır. Klasörleri kopyalamak istiyorsak `-r` işaretini eklememiz gerekir. Kopyalamak istediğimiz dosyanın tam konumunu bilmeliyiz ve eksiksiz olarak kodumuzda bu konumu vermeliyiz. Sondaki `.` işareti, bulunduğumuz yere bu klasörün kopyalanmasını sağlar.

```bash
cp tarihce.txt duzenlemis-tarhice.txt
```

İsim değiştirme veya dosyayı başka bir konuma taşıma

```bash
mv tarihce.txt eski-tarihce.txt
```
 
Burada dosyaları aynı klasöre kopyalaıdık veya taşıdırk İstersek başka klasörlere kopyalyabilr ya da taşıyabilirnşz.:

Mesela bir dosyayı kendi ev klasörümüze kopyalayım:

```bash
cp eski-tarihce.txt /truba/home/egitim123/
```

Şimdi klasörü kontrol edelim:

```bash
ls -ltrh /truba/home/egitim123/
```

İstersek başka bir klasöre de taşıyabilirz:

```bash
mv duzenlemis-tarhice.txt /truba/home/egitim123/duzenlemis-tarhice.txt
```

Öncelikle çalışma klasörümüzü okntrol edeliömm:

```bash
ls -ltrh
```

O dosya artık yok.

Şimdi de ev klasörümüzü kontrol edelikm:

```bash
ls -ltrh /truba/home/egitim123/
```

Linux üzerinde bunun gibi kısayollar bulunmaktadır.

+ `.` bulunduğumuz klasör
+ `~` ev klasörümüz

Mesela az önce taşıdığımız dosyayı, başka bir isimde bulunduğunuz klasöre taşıyoların:

```bash
mv ~/duzenlenmis-tarihce.txt ./yeni-tarihce.txt
```

## Dosyalarda arama yapmak

İstersek `grep` komutu ile de bir dosya içerisinde arama yapabiliriz. Ancak bu sefer yaptığımız arama ekrana yazdırılacaktır:

```bash
grep ">" DNA-fasta.fna
```

## Boru (Pipe)

Diğer önemli bir özellik ise, elimizdeki çıktıyı başka bir dosyaya yönlendirmek. Bunun için `|` karakterini kullanıyoruz.

```bash
grep ENA ornek.fasta | grep CAA
```

Yukarıdaki komuta bakarsak, önce "ENA" kelimesini arıyoruyz, sonra çıktıyı başka bir `grep` komutuna yönlendirip, `CAA` kelimesini arıyoruyz.

İstersek o çıktıyı bir dosyaya gönderebiliriz:

```bash
grep ENA ornek.fasta | grep CAA > arama.txt
```

Ama dikkat edin! Artık `arama.txt` dosyasının üzerine yazdık! Eğer bu dosyayı korumak istiyorsanız başka bir dosya ismi vermelisiniz.


## Metin dosyaları oluşturmak

Şimdi ise metin dosyalarını oluşturma ve kaydetmeye bakalım. Metin tabanlı sistemlerde `nano` isimli metin editörü, bize metin dosyaları ile çalışma imkanı sağlar. 

Daha önce oluşturduğumuz `arama.txt` dosyasını metin editörü ile açalım. Yukarıda bahsedilen `cat` komutu ile düzenleme yapamayız, sadece okuyabiliriz:

```bash
nano arama.txt
```

Artık dosya içerisine istediğimiz bilgiyi yazabiliriz. Yazdıklarımız bittikten sonra `ctrl + o ` tuşu ile kaydedebiliriz. Ardından `ctrl + x` tuş kombinasyonuyla çıkış yapabilirsiniz.

İsterseniz yeni bir dosya oluşturabilirsiniz, benzer şekilde önceden var olmasına gerek yoktur, bu komutu yazarken otomatik olarak oluşacaktır:

```bash
nano yeni-dosya.txt
```

Dikkat edin, boşluk karakteri kullanmadım. Onun yerine tire `-` karakterini kullandım.

## `for ` döngüsü kullanımı

For döngüsü mantığına bakalım:

Bir klasör içerisinde 15 tane dosya var ve bu dosyaların hepsine uygulamak istediğimiz bir işlem var diyelim. Bu işlemi her dosyaya ayrı ayrı uygulamak yerine, `for` döngüsü kullanarak aynı anda hepsine uygulama yapılabilir.
Dosyaların hepsini bir değişkende toplayalım, dosya isimlerini tek tek elle yazmamız gerekebilir, eğer bu dosya adlarında veya uzantılarında belli başlı ortak özellikler varsa, daha pratik bir kodlama yapabiliriz. 
Artık dosyaları tek tek yazmak yerine, değişken ismi ile bu dosyalar bütününü temsil edebiliriz.
`for` döngüsü bu değişkendeki dosyaları tek tek alır, işlemi yapar, işlem tamamlanınca bir sonraki dosyaya geçer, işlemi yapar, tamamlar, ve bu şekilde artık işlem yapılacak dosya kalmayana kadar bu döngüyü devam ettirir. 

For döngüsü şu şekilde kullanılır.

Bir değişken belirleyelim:

```bash
FILES="a.txt b.txt c.txt"
```

Elimizde 3 farklı dosya olsun. Bu üç dosyaya belirli işlemleri uygulamak istiyoruz. For döngüsü sayesinde bu işlemleri tek tek bütün dosyalara sırayla uygulayabiliriz:

```bash
for FILE in ${FILES}
do
    echo ${FILE}
done
```

Bu betik, öncelikle FILES içersisindeki dosyaları sırayla FILE içersine atacak. ve `do` kısmından sonra gelen adımı uygulayacak.

For döngüsü özet:

Klasördeki değişkendeki her bir dosya için;
Klasöre işlem uygula,
Dosyaların hepsi işlenince bitir.