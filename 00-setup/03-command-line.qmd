# Komut satırı kullanımı {#sec-command-line}

Ders kapsamında yapacağımız çalışmalarda öncelikle TRUBA üzerinde komut satırı kullanımını inceleyeceğiz.

Öncelikle sistemimimize bağlanalım. Burada `egitim` yerine size verilen kullanıcı ismini girmelisiniz. Daha sonra yine size verilen şifrenizi yazarak sisteme bağlanabilirsiniz. Ancak şifrenizi yazarken ekrandaki imleç hareket etmeyecektir. Siz normal bir şekilde şifrenizi yazın:

```bash
ssh egitim@levrek.ulakbim.gov.tr
```

Sisteme girdikten sonra çıkan ekranı `enter` tuşuna basarak geçelim.

## Linux'ta dosya yapısı

Girdiğimiz ekran aslında bizim kullanıcı klasörümüz olacaktır. TRUBA - ve genel olarak linux sistemleri - çok kullancılı bilgisayarlardır. Bunun anlamı, sistem üzerinde farklı kullanıcılar bulunmakta ve TRUBA sistemi de bütün işleyişi kontrol etmektedir. Her kullanıcı, kendi klasörü içerisinde bütün yazma (W), okuma (R), ve çalıştırma (X) haklarına sahiptir. Ancak diğer kullanıcıların klasörlerinde, ve sistem ile ilgili klasörlerde çok kısıtlı haklara sahip olabilirler.

Linux işletim sisteminde dosya yapısı kök `/` işareti ile başlar. Bu işaret aynı zamanda klasörleri birbirinden ayrır.

Bulunduğumuz klasör konumunu öğrenmek için `pwd` (print working directory) komutunu yazalım:

```bash
pwd
```

Benim ekranımda bu komutun çıktısı şöyle oldu:

```bash
/truba/home/egitim
```

`home` klasörü, kullanıcıların klasörlerinin bulunduğu konumu işaret etmektedir.

## Klasör içeriğini görüntüleme

Şimdi `ls` komutunu yazalım. Bu komut bulunduğumuz klasördeki dosyaları ve klasörleri gösterir.

Eğer daha ayrıntılı bilgi istersek, `ls -l` komutunu kullanabiliriz. Bu komut, dosya ve klasörleri listeler; yime istersek klasör adı belirtebiliriz:

```bash
ls -l
```

Benim ekranımda şöyle bir görüntü çıktı (@fig-command-line). 

![ls -l komutu çıktısı](images/command-line.png){#fig-command-line}

En çok aşağıdaki komutu kullanıyorm. Bu sayede klasörleri son değiştirme sırasına göre gösterebiliyoruz ve bayt bilgisini okunabilir hale getiriyoruz:

```bash
ls -ltrh
```

## Klasör oluşturma

Şimdi komut satırını öğrenmek için gerekli olan dosyaları yükleyeceğimiz klasörü oluşturalum. `mkdir` komutu klasör oluşturmak için kullanılır. İlk olarak kendi ismimizi kullanarak bir klasör oluşturalım:

Klasörü kendi ismimizde oluşturalım:

```bash
mkdir emrah
```

## Klasörlerde hareket

Bunun için `cd` komutunu kullanıyoruz:

```bash
cd emrah
```

Şimdi de `pwd` yazalım. Artık yeni oluşturduğunuz klasör içerisindesiniz.

Bir üst seviyeye çıkmak için `cd ..` yazın.

Ancak bu çalışma kapsamında şimdi kendi ismizle oluşturduğunuz klasöre gidiniz.

```bash
cd emrah
```

## Temel dosya işlemleri

Bu kısımda öncelikle kullanacağımız veri setini indirelim:

```bash
wget https://github.com/emrahkirdok/bioinformatics/raw/3defc4590bf8a351c30747061be5fde3924eae5d/00-setup/test-data.tar.gz
```

Kullandığımız `wget` komutu internet üzerindeki bir dosyayı indirmemizi sağlıyor.

Dosyaya bakalaım:

```bash
ls -ltrh 
```

Burada sıkıştırılmış bir arşiv dosyası indirdik, `tar` bu dosyanın arşivlendiğini, `gz` ise sıkıştırıldığın bize belitmektedir. Dosya rengi kırmızı çünkü sıkıştırılmış bir dosya.

Bu dosyayı açalım:

```bash
tar -xzvf test-data.tar.gz
```

Opsiyonlar:

+ `x` arşiv dosyasını aç
+ `z` arşiv dosyasının sıkıştırılmış bir dosya olduğunu belirtir, önce sıkıştırmayı açar
+ `v` açtığı dosyaların isimlerini gösterir
+ `f` çalışmak istediğimiz arşiv dosyasının ismi, veya tam yolu

Bakalım arşivi açmış mıyız?

```bash
ls -ltrh
```

Açtığımız klasörü `ls` komutu ile inceleyebiliriz. Klasörün içinde değilsek klasör adını yazmalıyız; klasör adı yazmadığımız durumda her neredeysek oradaki dosyaları listeleyecektir: 

```bash
ls -ltrh test-data
```

Bu klasör içerisine girelim:

```bash
cd test-data
```

Klasör içindekileri gösterelim:

```bash
ls -ltrh
```

## Dosya içeriğini gösterme

Bir dosya içeriğini ekrana yazdırmak istiyorsak, `cat` komutunu kullanmalıyız:

```bash
cat ornek_fasta.fasta
```

Ancak dosya boyutumuz fazlaysa, bunu kullanamayız. Çünkü her şeyi ekrana yazdırır. Örnek olarak aşaüıdaki dosya uzun bir dosya:

```bash
cat ornek_fastq.fastq
```

Dosyanın ilk 10 satırını ekrana yazdıralım:

```bash
head  -n 10 ornek_fastq.fastq
```

Son 10 satırı yazdıralım

```bash
tail -n 10 ornek_fastq.fastq
```

Ancak bu komutlar dosya içeriğini ekrana yazdırır.

## Dosyaları `less` ile inceleme

Ama dosyaları ekrana yazdırmak yerine incelemek istersek, `less` komutunu kullanmamız gerekecektir:

```bash
less  ornek_fastq.fastq
```

Ok tuşları ile dosyada yukarı ve aşağı hareket edebilirsiniz. Bu programdan çıkmak için `q` tuşuna basın.

## Tarihçeyi elde etmek

Yazdığımız komutların tarihçesini elde etmek istersel `history` komutunu kullanabiliriz. Bunu protokolünüzde kullandığnız kodları kaydetmek için kullanabilisiniz.

```bash
history
```

## Komut çıktısını yönlendirme

Unix/Linux sistemlerinin en önemli özelliklerinden bir tanesi, bir dosyadan elde edilen çıktıyı başka bir dosyaya yönlendirme. Bu sayede, elde ettiğiniz sonuçları dosyalara aktarabilirsiniz. Mesela tarihçeyi, `tarihce.txt` dosyasına aktaralım:

```bash
history > tarihce.txt
```

Şimdi `ls -ltrh` ile inceleyim.

Bir `tarihce.txt` isimli dosyanın oluşmuş olması gerekli.

:::{.callout-warning}
## Varolan dosyanın üzerine yazma

Eğer `>` kullanırsanız, ve varolan bir dosyayı hedef gösterirseniz, o dosyanın üzerine yazmış olursunuz! Dosyanın içindeki eski bilgileri kaybederiz!

Eğer bu dosyayı silmeden ekleme yapmak istersenz, `>>` kullanın. Bu sayede varolan dosyayı silmez, sonuna ekler.

:::

## Bir dosyayı değiştirme ve güncelleme

Şu ana kadar varolan dosyalarla salt okunur işlemler yaptık. Bir dosyayı açmak ve değiştirmek için `nano` programını kullanabilirsiniz:

```bash
nano tarihce.txt
```

Aşağıda bulunan kısayolları kullanarak işlemlerinizi gerçekleştirebilirsiniz:

CTRL + K metni keser
CTRL + U metni yapıştırır
CTRL + O dosyayı kaydeder
CTRL + X çıkar

## Dosya ve klasör kopyalama

İlk olarak örnek dosyamızı kopyalayarak işe başlayalım. `cp` komutu dosya ve klasörleri kopyalamak için kullanılır. Kopyalamak istediğimiz dosyanın tam konumunu bilmeliyiz ve eksiksiz olarak kodumuzda bu konumu vermeliyiz. Sondaki `.` işareti, bulunduğumuz yere bu klasörün kopyalanmasını sağlar.

Oluşturduğumuz dosyalardan bir tanesini kopyalayalım:

```bash
cp tarihce.txt duzenlenmis-tarihce.txt
```

`ls` komutu ile yeni bir dosyanın oluştuğunu kontrol edin.

Bir dosyanın ismini değiştirmek veya dosyayı başka bir konuma taşımak için `mv` komutu kullanılır:

```bash
mv tarihce.txt eski-tarihce.txt
```
 
Burada dosyaları aynı klasöre kopyaladık veya taşıdırk İstersek başka klasörlere kopyalyabilr ya da taşıyabilirsiniz:

Mesela bir dosyayı kendi ev klasörümüze kopyalayım:

```bash
cp eski-tarihce.txt /truba/home/egitim123/
```

Şimdi klasörü kontrol edelim:

```bash
ls -ltrh /truba/home/egitim123/
```

İstersek başka bir klasöre de taşıyabilirz:

```bash
mv duzenlenmis-tarihce.txt /truba/home/egitim123/duzenlenmis-tarihce.txt
```

Öncelikle çalışma klasörümüzü kontrol edelim:

```bash
ls -ltrh
```

Dikkat ederseniz artık o dosya artık yok.

Şimdi de ev klasörümüzü kontrol edelikm:

```bash
ls -ltrh /truba/home/egitim123/
```

Bununla birlikte Linux üzerinde bazı klasörler için kısayollar bulunmaktadır.

+ `.` bulunduğumuz klasör
+ `~` ev klasörümüz

Mesela az önce taşıdığımız dosyayı, ismini değiştirerek bulunduğumuz klasöre taşıyalım:

```bash
mv ~/duzenlenmis-tarihce.txt ./yeni-tarihce.txt
```

## Dosyalarda arama yapmak

İstersek `grep` komutu ile de bir dosya içerisinde arama yapabiliriz. Ancak bu sefer yaptığımız arama ekrana yazdırılacaktır. `DNA-fasta.fna` dosyasında, `>` karakterine sahip satırları arayalım:

```bash
grep ">" DNA-fasta.fna
```

## Bir programın çıktısını başka bir programa aktarma (boru, pipe)

Diğer önemli bir özellik ise, elimizdeki çıktıyı başka bir dosyaya yönlendirmek. Bunun için `|` karakterini kullanıyoruz.. Mesela bir önceki çıktıda bulunan `>` karakterini silmek istediğimiz varsayalım.

Bu çıktıyı, `sed` isimli programa aktarıyoruz ve `>` karakterini siliyoruz. Burada `s` karakter değiştirme komutunu simgeliyor.

```bash
grep ">" DNA-fasta.fna | sed 's/>//g'
```

Hatta sadece tür isimlerini alalım. Bunun için `cut` komutu ile sütünlara ayırıp, ikinci sütüundan itibaren bütün bilgiyi toplayalım:

```bash
grep ">" DNA-fasta.fna | sed 's/>//g' | cut -d " " -f 2-
```

Bu komutta `-d` opsiyonu ayırma karakterini simgeliyor. Burada boşluk kullanılmış. `-f` opsiyonu ise kullanılacak sütunları gösteriyor. Boşluk karakteri ile ayırdığımızda ikinci sütüundan itibaren bütün sütünları elde edelim anlamına gelmektedir.

İstersek o çıktıyı bir dosyaya gönderebiliriz:

```bash
grep ">" DNA-fasta.fna | sed 's/>//g' | cut -d " " -f 2- > dizi-isimleri.txt
```

## `for ` döngüsü kullanımı

For döngüsü mantığına bakalım:

Bir klasör içerisinde 15 tane dosya var ve bu dosyaların hepsine uygulamak istediğimiz bir işlem var diyelim. Bu işlemi her dosyaya ayrı ayrı uygulamak yerine, `for` döngüsü kullanarak aynı anda hepsine uygulama yapılabilir.
Dosyaların hepsini bir değişkende toplayalım, dosya isimlerini tek tek elle yazmamız gerekebilir, eğer bu dosya adlarında veya uzantılarında belli başlı ortak özellikler varsa, daha pratik bir kodlama yapabiliriz. 
Artık dosyaları tek tek yazmak yerine, değişken ismi ile bu dosyalar bütününü temsil edebiliriz.
`for` döngüsü bu değişkendeki dosyaları tek tek alır, işlemi yapar, işlem tamamlanınca bir sonraki dosyaya geçer, işlemi yapar, tamamlar, ve bu şekilde artık işlem yapılacak dosya kalmayana kadar bu döngüyü devam ettirir. 

For döngüsü şu şekilde kullanılır.

Bir değişken belirleyelim:

```bash
FILES="a.txt b.txt c.txt"
```

Elimizde 3 farklı dosya olsun. Bu üç dosyaya belirli işlemleri uygulamak istiyoruz. For döngüsü sayesinde bu işlemleri tek tek bütün dosyalara sırayla uygulayabiliriz:

```bash
for FILE in ${FILES}
do
    echo ${FILE}
done
```

Bu betik, öncelikle FILES içersisindeki dosyaları sırayla FILE içersine atacak. ve `do` kısmından sonra gelen adımı uygulayacak.

For döngüsü özet:

Klasördeki değişkendeki her bir dosya için;
Klasöre işlem uygula,
Dosyaların hepsi işlenince bitir.